2. When I print the ticket the value that returns to 0 is the money inserted into the machine.

3. When I insert more money it takes it all and prints me a ticket no matter how much I put.
as long as its above 0.

5.The only difference I see is the amount of money put in,Ticket 1 245353 cents and t2 is 2445.

6. public class Student      and       public class LabClass
{                                      {
    
7. The green doesnt cover anything below class public and the error message being 
<identifier expected> it is quite a vague explanation.

10. the fields are price, balance and total. The constructor is public TicketMachine.
Lastly methods being public int getPrice and public int getBalance

11. there is no type in a constructer and it has to matcht the class name

12. private int count; is an integer
    private student rep; is a string
    private Server bost; is a string
    
13. private boolean alive; alive
    private Person tutor; tutor
    private Game game; is game
    
14. 

15. No it does not matter all is saysi is the identifier is expected.  
    The appearance does change when modified it helps when finding the correct order.

16. Yes it is necessary to put a semi colon.

17. private int status;
    
18. yes, It is apart of student.

19. It has two, String title and double price.

20. Yes they do need to be stored, yes you can guess some and we cant know for sure the names but 
we can guess.

21. public pet (String petName)
{
name=petName;
}

22. public date(String month, int day, int year)
{
    System.out.printIn(month + day + year)
}

23. The names appear different in both body and header

24. "Give me the balance"

25. If one is changed the other does not need to be.

26. look at the code

27.it says not a statement

28.one is void other is int

29. for InsertMoney it doesnt have a return statement because insertmoney hases getbalance
and PrintTicket prints it onto the terminal.

31. /**
    * Increase score by the given number of points.
    */
    public void increaseScore(int points)
    {
    score = score + points;
    }

32. It is a mutator,how you show it is printing it beforehand and after.

33. 
/**
* Reduce price by the given amount.
*/
public void discount(int amount)
{
    price = price - amount;
}

34. 
public void setAge(int currentAge)
{
    age = currentAge
}

35. 
public void setAlive(boolean alive) {
    this.alive = alive;
}

36. It returns to 0

37."My cat has green eyes"

38. Provided in source code

39. Price would be printed instead of the variable of price.

40. It would print ("# price cents.");

41. They have seperate prices each one being objects

42. Seperate prices , each objects run seperate stuff.

43. It should be identical however %d inserts the next arguement as a ineger and %n finishes end the line

44. When I run it and create an object it doesnt give an option to put the price of a ticket.

46. No it doesnt need to take parameters because it always resets the same field to 0.
The empty method is a mutator because it changes the state of (total)



